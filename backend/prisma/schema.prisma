// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// tells Prisma to generate TypeScript client code for interacting with your DB.
generator client {  
  provider = "prisma-client-js"
}

//connects Prisma to your PostgreSQL database using the .env variable DATABASE_URL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @relation directive tells Prisma:
// “This field is part of a relationship (foreign key) between two models.”

model User {
  id        String   @id @default(uuid())  // @id marks a field as the primary key for the table.
  email     String   @unique
  password  String
  name      String
  phone     String?
  region    String
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile Information
  bio                String?
  dateOfBirth        DateTime?
  gender             String?
  city               String?
  country            String?
  
  // Contact & Social
  emailVisibility    VisibilityType @default(PRIVATE)
  instagramUrl       String?
  twitterUrl         String?
  facebookUrl        String?
  linkedinUrl        String?
  
  // Sports Preferences
  favoriteSports     String[] // Array of sports
  preferredPositions String[] // Array of positions
  skillLevel         SkillLevel?
  
  // Personal Stats
  totalMatches       Int @default(0)
  totalWins          Int @default(0)
  totalGoals         Int @default(0)
  totalAssists       Int @default(0)
  
  // Availability
  weeklyAvailability Json? // Store as JSON: {"monday": ["09:00-12:00"], "tuesday": [], ...}
  willingToJoinTeams Boolean @default(true)
  
  // Settings
  profileVisibility  VisibilityType @default(PUBLIC)
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  
  // Additional Features
  qrCode             String? // Generated QR code for profile sharing
  favoriteTeams      String[] // Array of favorite team names
  favoritePlayers    String[] // Array of favorite player names
  isVerified         Boolean @default(false)
  
  // Profile completion
  profileCompleted   Boolean @default(false)

  // Relations
  ownedTeams    Team[]        @relation("TeamOwner")
  teamMembers   TeamMember[]
  sentChallenges Challenge[]  @relation("ChallengeFrom")
  receivedNotifications Notification[]
  reportedMatches Match[]    @relation("MatchReporter")
  achievements  Achievement[]
  trophies      Trophy[]
  posts         Post[]
  postLikes     PostLike[]
  postComments  PostComment[]

  @@map("users")
}

model Team {
  id           String   @id @default(uuid())
  name         String
  sport        String
  region       String
  description  String?
  maxPlayers   Int      @default(11)
  contactEmail String
  contactPhone String
  avatar       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Stats
  wins         Int @default(0)
  losses       Int @default(0)
  draws        Int @default(0)
  rating       Int @default(1500)
  matchesPlayed Int @default(0)

  // Relations
  owner        User         @relation("TeamOwner", fields: [ownerId], references: [id])
  ownerId      String
  members      TeamMember[]
  sentChallenges     Challenge[] @relation("ChallengeFromTeam")
  receivedChallenges Challenge[] @relation("ChallengeToTeam")
  homeMatches  Match[]      @relation("HomeTeam")
  awayMatches  Match[]      @relation("AwayTeam")

  @@map("teams")
}

model TeamMember {
  id       String @id @default(uuid())
  joinedAt DateTime @default(now())
  role     String @default("member") // member, captain, vice-captain

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String

  @@unique([userId, teamId])
  @@map("team_members")
}

model Challenge {
  id           String      @id @default(uuid())
  sport        String
  proposedDate DateTime
  proposedTime String
  venue        String?
  message      String?
  status       ChallengeStatus @default(PENDING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  fromUser     User        @relation("ChallengeFrom", fields: [fromUserId], references: [id])
  fromUserId   String
  fromTeam     Team        @relation("ChallengeFromTeam", fields: [fromTeamId], references: [id])
  fromTeamId   String
  toTeam       Team        @relation("ChallengeToTeam", fields: [toTeamId], references: [id])
  toTeamId     String
  match        Match?

  @@map("challenges")
}

model Match {
  id        String      @id @default(uuid())
  sport     String
  matchDate DateTime?   // Made optional to handle existing data
  venue     String?
  status    MatchStatus @default(SCHEDULED)
  result    MatchResult?
  notes     String?
  
  // Scores
  homeScore Int?
  awayScore Int?
  winnerId  String?
  
  // Rating changes
  homeRatingChange Int?
  awayRatingChange Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  String    @unique
  homeTeam     Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId   String
  awayTeam     Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId   String
  reportedBy   User?     @relation("MatchReporter", fields: [reportedById], references: [id])
  reportedById String?   // Made optional to handle existing data

  @@map("matches")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id])
  userId    String

  @@map("notifications")
}

model Achievement {
  id          String          @id @default(cuid())
  type        AchievementType
  title       String
  description String
  icon        String?
  dateEarned  DateTime
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())

  @@map("achievements")
}

model Trophy {
  id          String     @id @default(cuid())
  type        TrophyType
  title       String
  description String
  icon        String?
  dateEarned  DateTime
  event       String?    // Tournament/competition name
  position    String?    // 1st, 2nd, 3rd place etc.
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())

  @@map("trophies")
}

model Post {
  id        String      @id @default(cuid())
  type      PostType    // PHOTO, VIDEO, TEXT
  mediaUrl  String?     // URL for photos/videos (nullable for text posts)
  content   String?     // Text content for text posts
  caption   String?     // Caption for all post types
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  likes    PostLike[]
  comments PostComment[]

  @@map("posts")
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model PostComment {
  id      String @id @default(cuid())
  content String
  userId  String
  postId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

enum PostType {
  PHOTO
  VIDEO
  TEXT
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum MatchResult {
  WIN
  LOSS
  DRAW
}

enum NotificationType {
  CHALLENGE_RECEIVED
  CHALLENGE_ACCEPTED
  CHALLENGE_DECLINED
  MATCH_SCHEDULED
  MATCH_COMPLETED
  TEAM_INVITATION
  RATING_UPDATE
}

enum VisibilityType {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum AchievementType {
  MVP
  TOP_SCORER
  BEST_DEFENSE
  TEAM_PLAYER
  CAPTAIN
  TOURNAMENT_WINNER
  STREAK_WINNER
  COMEBACK_KING
}

enum TrophyType {
  GOLD
  SILVER
  BRONZE
  PARTICIPATION
  SPECIAL
}
